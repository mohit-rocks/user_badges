<?php

/**
 * @file
 * Contains user_badges.module..
 */

use Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function user_badges_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the user_badges module.
    case 'help.page.user_badges':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('User Badges module.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function user_badges_theme() {
  $theme = [];

  return $theme;
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function user_badges_user_presave(Drupal\Core\Entity\EntityInterface $entity) {
  /** @var \Drupal\user\Entity\User $entity */
  $account_role_ids = $entity->getRoles();
  $field_item_list = $entity->get('field_user_badges');
  // Keep a badge if it doesn't have any roles or if it has a role among the
  // current roles.
  $field_item_list->filter(function (EntityReferenceItem $item) use ($account_role_ids) {
    /** @var \Drupal\user_badges\Entity\Badge $badge */
    $badge_role_ids = $item->get('entity')->getValue()->getBadgeRoleIds();
    return !$badge_role_ids || array_intersect($badge_role_ids, $account_role_ids);
  });
  // Add the rest.
  $new_role_badge_ids = \Drupal::entityQuery('badge')
    ->condition('id', explode(', ', $field_item_list->getString()), 'NOT IN')
    ->condition('role_id', $account_role_ids, 'IN')
    ->execute();
  array_map([$field_item_list, 'appendItem'], $new_role_badge_ids);
}
