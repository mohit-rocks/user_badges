<?php

/**
 * @file
 * Contains user_badges.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * Implements hook_help().
 */
function user_badges_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the user_badges module.
    case 'help.page.user_badges':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('My Awesome Module') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function user_badges_theme() {
  $theme = [];
  $theme['user_badge'] = [
    'render element' => 'elements',
    'file' => 'user_badge.page.inc',
    'template' => 'user_badge',
  ];
  $theme['user_badge_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'user_badge.page.inc',
  ];
  return $theme;
}

/**
 * Adds the image field to user badge entity.
 *
 * @param \Drupal\user_badges\Entity\UserBadgeTypeInterface $user_badage
 *   User Badge.
 */
function user_badges_add_field_user_badge_image_field($user_badge) {
  $field_storage = FieldStorageConfig::loadByName('user_badge', 'field_user_badge_image');
  $field = FieldConfig::loadByName('user_badge', $user_badge->id(), 'field_user_badge_image');
  if (empty($field_storage)) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => 'field_user_badge_image',
      'entity_type' => 'user_badge',
      'type' => 'image',
      'cardinality' => 1,
      'settings' => [
        'target_type' => 'file',
        'uri_scheme' => 'public',
      ],
      'locked' => TRUE,
      'translatable' => TRUE,
    ]);
    $field_storage->save();
  }
  if (empty($field)) {
    $field = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => $user_badge->id(),
      'label' => 'Badge Image',
      'required' => TRUE,
      'settings' => [
        'handler' => 'default',
        'handler_settings' => [],
      ],
      'translatable' => TRUE,
    ]);
    $field->save();

    // Assign widget settings for the 'default' form mode.
    entity_get_form_display('user_badge', $user_badge->id(), 'default')
      ->setComponent('user_badge', [
        'type' => 'image',
        'weight' => -10,
      ])
      ->save();
  }
}
